=pod

=head1 Unicode Data

The C<pdfout_data> is a complex data type. This is the data format used to
interface with the parsers and emitters described below.

It is organized into 3 different types:

=over

=item * Scalar:

A scalar holds an UTF-8 string, which may contain embedded null bytes and does
not have to be null-terminated.

=item * Array:

An array holds an array of pointers to C<pdfout_data> types.

=item * Hash:

A hash is a set of key-value pairs. Both key and value are pointers to
C<pdfout_data> types. The keys must be unique scalars.

=back

=head2 Functions


=head3 Type queries

 bool pdfout_data_is_scalar (fz_context *ctx, pdfout_data *data);
 bool pdfout_data_is_array (fz_context *ctx, pdfout_data *data);
 bool pdfout_data_is_hash (fz_context *ctx, pdfout_data *data);

=head3 Scalars

Create a new scalar with

 pdfout_data *pdfout_data_scalar_new (fz_context *ctx, const char *value,
			              int len);

Return the value of a scalar with

 char *pdfout_data_scalar_get (fz_context *ctx, pdfout_data *scalar, int *len);

where the length of the string is stored in C<*len>.

Often, it is known, that the key of a hash will be a null-terminated string.

 char *pdfout_data_scalar_get_string (fz_context *ctx, pdfout_data *scalar);

Returns a null-terminated string, which does not contain embedded null
bytes. Throw if the scalar contains embedded null bytes.

=head3 Arrays

Create a new array with

 pdfout_data *pdfout_data_array_new (fz_context *ctx);

The length of an array is obtained with

 int pdfout_data_array_len (fz_context *ctx, pdfout_data *array);

Elements of an array are accessed with

 pdfout_data *pdfout_data_array_get (fz_context *ctx, pdfout_data *array,
				     int pos);

New elements are appended with

 void pdfout_data_array_push (fz_context *ctx, pdfout_data *array,
			      pdfout_data *entry);

=head3 Hashes

Create a new hash with

 pdfout_data *pdfout_data_hash_new (fz_context *ctx);

The number of key-value pairs in a hash is obtained with

 int pdfout_data_hash_len (fz_context *ctx, pdfout_data *hash);

New key-value pairs are appended with

 void pdfout_data_hash_push (fz_context *ctx, pdfout_data *hash,
         	             pdfout_data *key, pdfout_data *value);

C<key> has to be a scalar. The keys in a hash must be
unique. Trying to add a key which is already present in the hash will throw an
exception.

There are multiple functions to access a hashes key-value pairs.

 pdfout_data *pdfout_data_hash_get_key (fz_context *ctx, pdfout_data *hash,
				        int i);
 pdfout_data *pdfout_data_hash_get_value (fz_context *ctx, pdfout_data *hash,
					  int i);

These extract key and value of the i-th key-value pair.


=head4 Hash Convenience Functions

 pdfout_data *pdfout_data_hash_gets (fz_context *ctx, pdfout_data *hash,
				     char *key);

Searches the hash for the key C<key> and returns the key's value. If no key is
found, NULL is returned.

If it is known that the key is a null-terminated string, and the value is a
scalar, use this convenience function:

 void pdfout_data_hash_get_key_value (fz_context *ctx, pdfout_data *hash,
				      char **key, char **value, int *value_len,
				      int i);

Throw if the value is not a scalar.

To add a null-terminated key with a scalar value, use this function:

 void pdfout_data_hash_push_key_value (fz_context *ctx, pdfout_data *hash,
				       const char *key, const char *value,
				       int value_len)

=head3 Destructor

 void pdfout_data_drop (fz_context *ctx, pdfout_data *data);

Recursively free.



=head1 Parsing and Emitting


A C<pdfout_parser> reades a C<pdfout_data> object from a
C<fz_stream>. Conversely, a C<pdfout_emitter> writes a C<pdfout_data> object to
a C<fz_output>.

This is done with these functions:

 pdfout_data *pdfout_parser_parse (fz_context *ctx, pdfout_parser *parser);
 
 void pdfout_emitter_emit (fz_context *ctx, pdfout_emitter *emitter,
			  pdfout_data *data);
 

=head2 JSON

A JSON parser/emitter is created with these functions:

 pdfout_parser *pdfout_parser_json_new (fz_context *ctx, fz_stream *stm);

 pdfout_emitter *pdfout_emitter_json_new (fz_context *ctx, fz_output *out);
 
=head2 Destructors

 void pdfout_parser_drop (fz_context *ctx, pdfout_parser *parser);

 void pdfout_emitter_drop (fz_context *ctx, pdfout_emitter *emitter);


=cut

# =head2 Example

# This program reads a hash, stored on disc as JSON in F<input.json>, adds a
# key-value pair and writes the result to F<output.json>.

# Create the parser:

#  fz_stream *stm = fz_open_file (ctx, "input.json");
#  pdfout_parser *parser = pdfout_parser_json_new (ctx, stm);

# Parse:

#  pdfout_data *hash = pdfout_parser_parse (ctx, parser);
#  assert (pdfout_data_is_hash (ctx, hash));

# Append a key-value pair:

#  const char *value = "Ronja RÃ¤ubertochter";
#  pdfout_data_hash_push_key_value (ctx, hash, "title", value, strlen (value));

# Create the emitter:

#  fz_output *out = fz_new_output_with_path (ctx, "output.json", false);
#  pdfout_emitter *emitter = pdfout_emitter_json_new (ctx, out);

# Emit:

#  pdfout_emitter_emit (ctx, emitter, hash);

 
 
   
